[{"id":1,"title":"Declarative Rendering: {{}} & `data () {}`","topic":"Vue.js","notes":["- def. SFC: Single File Component (.vue file)","- File encapsulating HTML, CSS, and JavaScript code.","- def. Declarative Rendering: describes how HTML should look based on JavaScript state","- Done inside of a <template> field which extends HTML in Vuejs","- def. reactive: the act of updating based on state changes","- Reactive state is held in Vue components","- Reactive state is declared using the `data` component option","- `data` is a function that returns an object","- def. {{}}: \"mustaches\" are only used for text interpolation","- To *bind* an attribute use the `v-bind` directive"]},{"id":2,"title":"Attribute Binding: v-bind | :arg","topic":"Vue.js","notes":["- def. directive: a special attribute starting with the `v-` prefix used in the Vue <template> syntax","- JavaScript code can be used inside the {{}} or v-bind:arg=\"JavaScriptCode\"","- <div v-bind:id=\"dynamicId\"></div>","- `:id` id is the argument of the directive","- `:id` is synced with the `dynamicId` property from the components state","- Shorthand syntax for `v-bind` -> `:arg`"]},{"id":3,"title":"Event Listeners: v-on | @click","topic":"Vue.js","notes":["- DOM events are listened to using the `v-on` directive","- ex. <button v-on:click=\"increment\">{{ count }}</button>","- Shorthand syntax for `v-on` -> `@click`","- `method` option: where functions are referenced which updates the variables in the `data` option","- To access the variables the \"component instance\" must be accessed using `this` keyword which exposes the `data` properties"]},{"id":4,"title":"Form Bindings :arg & @input | v-model","topic":"Vue.js","notes":["- `v-bind` and `v-on` can be used together to create two-way bindings on form input elements","- <input :value=\"text\" @input=\"onInput\">","- methods: {","-   onInput (e) {","-     this.text = e.target.value","-   }","- }","- `v-model` is syntactic sugar for `v-bind` and `v-on` by automatically syncing the <input> values with the bound state; ","- No need for event handlers when using `v-model`","- <input v-model=\"text\">","- `v-model` works on text inputs, checkboxes, radio buttons, select dropdowns, etc.","- Note: add `@submit.prevent=\"method\"` to a form to prevent the form from being submitted and instead run method"]},{"id":5,"title":"Conditional Rendering: v-if & v-if-else & v-else","topic":"Vue.js","notes":["- `v-if` is used to \"conditionally\" render an element","- `v-else` and `v-if-else` are used to denote other branch conditions","- <h1 v-if=\"awesome\">Vue is awesome!</h1>","- <h1 v-else>Oh no :(</h1>"]},{"id":6,"title":"List Rendering: v-for","topic":"Vue.js","notes":["-`v-for` can render a list of elements based on a source array","- <ul>","-   <li v-for=\"todo in todos\" :key=\"todo.id\">{{ todo.text }}</li>","- </ul>","- `:key` attribute gives each object in the array a unique `id`","- `:key` attribute allows Vue to move each list item to match the position of its corresponding object in the array","- Two ways to update a list: ","-   1. Call mutating methods on the source array: this.todos.push({id: id++, text: newTodo})","-   2. Replace the array with a new one: this.todos = this.todos.filter(t => t !== todo)",""]},{"id":7,"title":"Computed Property: `computed: {}`","topic":"Vue.js","notes":["- Renders items based on a particular state","- Has the ability to declare a property that is reactively computed from other properties","- export default {","-   computed: {","-     filteredTodos () {","-       // ...","-     }","-   }","- }","- Tracks reactive state used in its computation as dependencies.","- Caches results and auto-updates them when dependencies change."]},{"id":8,"title":"Lifecycle and Template Refs: `mounted () {}` & this.$ref","topic":"Vue.js","notes":["- `ref` attribute provides the ability to directly work with the DOM","- <p ref='p'>hello</p>","- Element is exposed with `this.$refs.p`","- The element can only be accessed after it is mounted","- export default {","-   mounted () {","-     // access DOM elements here and in the remaining lifecycle hooks","-   }","- }","- def. lifecycle hook: registering a callback to be called at certain times of the components lifecycle","- Available hooks: mounted, created, updated, etc.","- ref: https://vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram"]},{"id":9,"title":"Watchers: `watch: {}`","topic":"Vue.js","notes":["- Perform \"side effects\" reactively","- export default {","-   data () {","-     return {","-       count: 0","-     }","-   },","-   watch: {","-     count (newCount) {","-       console.log(`new count is: ${newCount}`)","-     }","-   }","- }"]},{"id":10,"title":"Components: `components: {}`","topic":"Vue.js","notes":["- Vue apps are typically created with nested components","- To nest a component it must be imported","- import ChildComp from './ChildComp.vue'","- export default {","-   components: {","-     ChildComp","-   }","- }","- Components need to be registered in the `components` option","- Use component in `template`: <ChildComp />"]},{"id":11,"title":"Props: `props: {}`","topic":"Vue.js","notes":["- Allows parent components to pass input to child components","- // in child component","- export default {","-   props: {","-     msg: String // or some object","-   }","- }","- Declared props are exposed on `this` and can be used in the child components template ","- Parent components can pass the prop to the child component like attributes","- Dynamic values are passed with `v-bind`","- <ChildComp :msg=\"greeting\" />"]},{"id":12,"title":"Emits: `emits: []`","topic":"Vue.js","notes":["- Child components can emit events to the parent","- export default {","-   emits: ['response'],","-   created: () {","      this.$emit('response', 'hello from child')","-   }","- }","- 'response' in `this.$emit(...)` is the event name ","- Additional args are passed to the event listener","- Parent components listen for child-emitted events with `v-on`","- Handlers can be used to receive extra arguments in the parent component from the child emit call","- <ChildComp @response=\"(msg) => ChildMsg = msg\" />"]},{"id":13,"title":"Slots: <slot/>","topic":"Vue.js","notes":["- Parent components can pass template fragments to the child via slots","- <ChildComp>This is slot content!</ChildComp>","- Slot content can be rendered in the child component from the parent component using the `<slot>` element","- Used if no fallback content will be used: <slot/> ","- Slot content inside the `<slot>` outlet will be treated as \"fallback\" content","- <slot>Fallback Content</slot>"]}]